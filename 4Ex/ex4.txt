import torch
import torch.nn as nn
import matplotlib.pyplot as plt
import pandas as pd
df = pd.read_csv("./iris.csv")
df
        sepal_length    sepal_width     petal_length    petal_width     species
0       5.1     3.5     1.4     0.2     setosa
1       4.9     3.0     1.4     0.2     setosa
2       4.7     3.2     1.3     0.2     setosa
3       4.6     3.1     1.5     0.2     setosa
4       5.0     3.6     1.4     0.2     setosa
...     ...     ...     ...     ...     ...
145     6.7     3.0     5.2     2.3     virginica
146     6.3     2.5     5.0     1.9     virginica
147     6.5     3.0     5.2     2.0     virginica
148     6.2     3.4     5.4     2.3     virginica
149     5.9     3.0     5.1     1.8     virginica
x = df.iloc[:,:-1]
x
y = df.iloc[:,-1]
y
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
x = scaler.fit_transform(x)
class KSOM(nn.Module):

    def __init__(self, input_dim, output_dim):
        super(KSOM, self).__init__()
        self.input_dim = input_dim
        self.output_dim = output_dim
        self.weights = torch.randn(input_dim,output_dim)

    def forward(self, x):
        distances = torch.sum((x - self.weights)**2, axis=1)
        winner = torch.argmin(distances)
        return winner

    def weight_updation(self, x, winner, lr=0.02):
        d = x
        for i in range(self.output_dim):
            if i == winner:
                self.weights[i] += lr * d[i]
            return self.weights[i]
model = KSOM(input_dim=4, output_dim=4)
actual=torch.randn(4,4)
loss=[]
for epoch in range(2):
    for o in x:
        o = torch.Tensor(o)
        winner = model(o)
        print(model.weight_updation(o, winner, lr=0.2))
        loss.append(actual-model.weight_updation(o, winner, lr=0.2))
print("loss : ",loss)

from sklearn.metrics import silhouette_score

# Get the cluster labels for each data point
cluster_labels = []
for o in x:
    o = torch.Tensor(o)
    winner = model(o)
    cluster_labels.append(winner)

# Calculate the silhouette score
silhouette = silhouette_score(x, cluster_labels)
print("Silhouette score: ", silhouette)